"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[458],{3376:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"dsl_key_ideas","title":"DSL: Key Ideas and Purpose","description":"Introduction","source":"@site/docs/dsl_key_ideas.mdx","sourceDirName":".","slug":"/dsl_key_ideas","permalink":"/mqtt-mimic/docs/dsl_key_ideas","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dsl_key_ideas.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Build from Source","permalink":"/mqtt-mimic/docs/build_from_source"},"next":{"title":"Components","permalink":"/mqtt-mimic/docs/category/components"}}');var s=i(4848),t=i(8453);const c={sidebar_position:3},r="DSL: Key Ideas and Purpose",a={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Overview of Components",id:"overview-of-components",level:2},{value:"1. Connect",id:"1-connect",level:3},{value:"2. Subscribe",id:"2-subscribe",level:3},{value:"3. Publish",id:"3-publish",level:3},{value:"4. Action",id:"4-action",level:3},{value:"Interactions Between Components",id:"interactions-between-components",level:2},{value:"Leveraging Groovy for Flexibility",id:"leveraging-groovy-for-flexibility",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dsl-key-ideas-and-purpose",children:"DSL: Key Ideas and Purpose"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"The utility uses a Domain-Specific Language (DSL) based on Groovy to configure and manage an MQTT client. Each DSL file\ndefines a single client, including its connection to the broker, message publishing, topic subscriptions, and other actions."}),"\n",(0,s.jsx)(n.admonition,{title:"Groovy :)",type:"tip",children:(0,s.jsx)(n.p,{children:"Built on Groovy, a scripting language for the JVM, this DSL offers great flexibility. You can write custom functions and\ncode directly in the DSL file on the fly, adapting logic, processing data, or prototyping quickly without limits."})}),"\n",(0,s.jsx)(n.p,{children:"The DSL comprises four main components that allow you to flexibly configure the client's behavior:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"connect"}),": Sets up the connection to the MQTT broker (host, port, credentials, SSL)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"publish"}),": Publishes messages to topics with configurable payload, QoS, retained flag, and scheduling options."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"subscribe"}),": Subscribes to topics and processes incoming messages using Groovy code."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"action"}),": Defines a named code block that can be invoked from other parts of the DSL or scheduled to run periodically."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"overview-of-components",children:"Overview of Components"}),"\n",(0,s.jsx)(n.h3,{id:"1-connect",children:"1. Connect"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"connect"})," component is used to configure the connection parameters for the MQTT broker. Within this block, you specify\nthe details required to establish a connection, such as host, port, credentials, and SSL settings (if needed)."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Syntax"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",children:'connect {\n    host = "broker.hivemq.com"\n    port = 1883\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-subscribe",children:"2. Subscribe"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"subscribe"})," component enables you to subscribe to MQTT topics and handle incoming messages using custom logic. When\na message arrives on the specified topic, the provided closure is executed to process the data."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Syntax"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",children:'subscribe("topic_pattern") { msg ->\n    // Message processing logic\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-publish",children:"3. Publish"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"publish"})," component allows you to configure the publishing of messages to an MQTT topic. You can specify the topic,\npayload, QoS, retained flag, and even set up scheduling and pre-/post-execution code."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Syntax"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",children:'publish("action_name") {\n    topic = "your/topic"\n    payload = "your_message"\n    qos = qos_level // 0, 1, or 2\n    retain = true/false\n    schedule {\n        interval = interval_in_millis\n        startImmediately = true/false\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-action",children:"4. Action"}),"\n",(0,s.jsx)(n.p,{children:"The action component lets you create named code blocks that can be invoked from other parts of the DSL or scheduled for\nperiodic execution."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Syntax"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",children:"action('action_name') {\n    // Any Groovy code\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"interactions-between-components",children:"Interactions Between Components"}),"\n",(0,s.jsx)(n.p,{children:"The DSL components can interact with one another, enabling the creation of complex and flexible scenarios. For example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"From subscribe"}),": You can trigger a ",(0,s.jsx)(n.code,{children:"publish"})," or an ",(0,s.jsx)(n.code,{children:"action"}),". When a message is received on a specific topic, it can\nactivate a message publication or execute a named action."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"From action"}),": You can call other ",(0,s.jsx)(n.code,{children:"action"})," blocks or trigger a ",(0,s.jsx)(n.code,{children:"publish"})," operation. Named actions can include logic\nthat invokes other actions or publishes messages."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Chaining publish calls"}),": A ",(0,s.jsx)(n.code,{children:"publish"})," operation can be configured to automatically trigger another publish after\nsending a message."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"And so on"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"leveraging-groovy-for-flexibility",children:"Leveraging Groovy for Flexibility"}),"\n",(0,s.jsx)(n.p,{children:"Built on Groovy, a scripting language for the JVM, this DSL lets you write custom functions and code directly in the DSL\nfile. This means you can adapt the client\u2019s behavior on the fly \u2013 adding logic, creating variables, processing data, or\nprototyping \u2013 without being limited to predefined commands."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",children:'def logMessage(String text) {\n    println "Log: $text"\n}\n\ndef messageCount = 0  // Variable to track received messages\n\nsubscribe("test/topic") { msg ->\n    messageCount++    // Increment the counter\n    logMessage("Message #$messageCount received: ${msg.payloadAsString}")\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this example, a messageCount variable is defined to track the number of received messages, and a logMessage function\nis used to print logs with the counter."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var o=i(6540);const s={},t=o.createContext(s);function c(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);