"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[236],{8453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>a});var s=n(6540);const i={},o=s.createContext(i);function r(t){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:r(t.components),s.createElement(o.Provider,{value:e},t.children)}},8826:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"recipes/smart_light_emulation","title":"Smart Light Emulation with Feedback","description":"Goal","source":"@site/docs/recipes/smart_light_emulation.md","sourceDirName":"recipes","slug":"/recipes/smart_light_emulation","permalink":"/mqtt-mimic/docs/recipes/smart_light_emulation","draft":false,"unlisted":false,"editUrl":"https://github.com/epistax1s/mqtt-mimic/tree/master/doc/docs/recipes/smart_light_emulation.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Temperature Sensor Emulation","permalink":"/mqtt-mimic/docs/recipes/temperature_sensor_emulation"}}');var i=n(4848),o=n(8453);const r={sidebar_position:2},a="Smart Light Emulation with Feedback",c={},l=[{value:"Goal",id:"goal",level:2},{value:"How it works:",id:"how-it-works",level:2}];function h(t){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"smart-light-emulation-with-feedback",children:"Smart Light Emulation with Feedback"})}),"\n",(0,i.jsx)(e.h2,{id:"goal",children:"Goal"}),"\n",(0,i.jsxs)(e.p,{children:["Create a virtual smart light that accepts ",(0,i.jsx)(e.code,{children:"on"}),"/",(0,i.jsx)(e.code,{children:"off"})," commands and sends back its current status via MQTT."]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Code"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-groovy",children:'// Configure connection to the MQTT broker for communication\nconnect {\n    host = "broker.hivemq.com"  // Hostname of the MQTT broker\n    port = 1883                 // Default MQTT port\n}\n\n// Set up environment variables for light ID and its initial status\nenv.lightId = "light_001"       // Unique identifier for the light\nenv.lightStatus = "OFF"         // Light starts in the OFF state\n\n// Subscribe to a command topic to receive ON/OFF commands\nsubscribe("lights/${env.lightId}/command") { msg ->\n    if (msg.payload == "ON") {      // If the command is ON\n        env.lightStatus = "ON"      // Update the light\'s status\n        doAction("sendStatus")      // Publish the new status\n        println "Light turned ON"   // Log the action for debugging\n    } else if (msg.payload == "OFF") {  // If the command is OFF\n        env.lightStatus = "OFF"     // Update the light\'s status\n        doAction("sendStatus")      // Publish the new status\n        println "Light turned OFF"  // Log the action for debugging\n    }\n}\n\n// Define the action to publish the current status of the light\npublish("sendStatus") {\n    topic = "lights/${env.lightId}/status"  // Dynamic topic based on light ID\n    payload = { "Status: ${env.lightStatus}" }  // Message with current status\n    qos = 1                 // Quality of Service level 1 (at least once delivery)\n    retain = true           // Retain the message so new subscribers get the latest status\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"how-it-works",children:"How it works:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Connection"}),": The light connects to the MQTT broker at ",(0,i.jsx)(e.code,{children:"broker.hivemq.com"})," on port ",(0,i.jsx)(e.code,{children:"1883"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Initialization"}),": The light is assigned an ID (",(0,i.jsx)(e.code,{children:"light_001"}),") and starts in the ",(0,i.jsx)(e.code,{children:"OFF"})," state."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Command Handling"}),": The light listens to the ",(0,i.jsx)(e.code,{children:"lights/light_001/command"})," topic for ",(0,i.jsx)(e.code,{children:"ON"})," or ",(0,i.jsx)(e.code,{children:"OFF"})," commands, updating its\nstatus accordingly and triggering a status update."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Status Publishing"}),": The ",(0,i.jsx)(e.code,{children:"sendStatus"})," action publishes the current state to ",(0,i.jsx)(e.code,{children:"lights/light_001/status"})," with the ",(0,i.jsx)(e.code,{children:"retain"}),"\nflag, ensuring new subscribers receive the latest status."]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Result"}),": This emulates a smart light that responds to commands and provides feedback about its state."]})]})}function d(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(h,{...t})}):h(t)}}}]);