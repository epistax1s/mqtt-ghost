"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[492],{7825:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"recipes/temperature_sensor_emulation","title":"Temperature Sensor Emulation","description":"Goal","source":"@site/docs/recipes/temperature_sensor_emulation.md","sourceDirName":"recipes","slug":"/recipes/temperature_sensor_emulation","permalink":"/mqtt-mimic/docs/recipes/temperature_sensor_emulation","draft":false,"unlisted":false,"editUrl":"https://github.com/epistax1s/mqtt-mimic/tree/master/doc/docs/recipes/temperature_sensor_emulation.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Recipes","permalink":"/mqtt-mimic/docs/category/recipes"},"next":{"title":"Smart Light Emulation with Feedback","permalink":"/mqtt-mimic/docs/recipes/smart_light_emulation"}}');var s=n(4848),o=n(8453);const i={sidebar_position:1},a="Temperature Sensor Emulation",c={},d=[{value:"Goal",id:"goal",level:2},{value:"How it works:",id:"how-it-works",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"temperature-sensor-emulation",children:"Temperature Sensor Emulation"})}),"\n",(0,s.jsx)(t.h2,{id:"goal",children:"Goal"}),"\n",(0,s.jsxs)(t.p,{children:["Create a virtual temperature sensor that periodically sends random temperature readings between 10\u201340\xb0C and\nresponds to ",(0,s.jsx)(t.code,{children:"on"}),"/",(0,s.jsx)(t.code,{children:"off"})," commands via MQTT."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Code"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-groovy",children:'// Configure connection to the MQTT broker (using a public broker for testing)\nconnect {\n    host = "broker.hivemq.com"  // Hostname of the MQTT broker\n    port = 1883                 // Default MQTT port\n}\n\n// Set up environment variables to store device ID and its initial state\nenv.deviceId = "sensor_001"     // Unique identifier for the sensor\nenv.isActive = false            // Sensor starts in an inactive state\n\n// Define an action to periodically publish temperature readings\naction("publishTemperature") {\n    justDo = {\n        if (env.isActive) {     // Only proceed if the sensor is active\n            // Generate a random temperature value between 10 and 40\xb0C\n            def temperature = new Random().nextInt(30) + 10\n            // Trigger the sendTemperature action to publish the value\n            doAction("sendTemperature", temperature)\n        }\n    }\n    schedule {\n        interval = 10_000       // Execute every 10 seconds\n        startImmediately = false // Do not start until explicitly activated\n    }\n}\n\n// Define the action to publish temperature data to an MQTT topic\npublish("sendTemperature") {\n    topic = "sensors/${env.deviceId}/temperature"  // Dynamic topic based on device ID\n    payload = { temperature -> "Temperature: $temperature\xb0C" }  // Format the message\n    qos = 1                 // Quality of Service level 1 (at least once delivery)\n}\n\n// Subscribe to a command topic to control the sensor (ON/OFF)\nsubscribe("sensors/${env.deviceId}/command") { msg ->\n    if (msg.payload == "ON") {      // Check if the command is to turn the sensor ON\n        env.isActive = true         // Set the sensor to active\n        activateAction("publishTemperature")  // Start the scheduled publishing\n        println "Sensor activated"  // Log activation for debugging\n    } else if (msg.payload == "OFF") {  // Check if the command is to turn the sensor OFF\n        env.isActive = false        // Set the sensor to inactive\n        deactivateAction("publishTemperature")  // Stop the scheduled publishing\n        println "Sensor deactivated"  // Log deactivation for debugging\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"how-it-works",children:"How it works:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Connection"}),": The sensor connects to an MQTT broker at ",(0,s.jsx)(t.code,{children:"broker.hivemq.com"})," on port ",(0,s.jsx)(t.code,{children:"1883"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Initialization"}),": The device gets a unique ID (",(0,s.jsx)(t.code,{children:"sensor_001"}),") and starts in an inactive state (",(0,s.jsx)(t.code,{children:"isActive = false"}),")."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Publishing"}),": The ",(0,s.jsx)(t.code,{children:"publishTemperature"})," action generates a random temperature and sends it via the ",(0,s.jsx)(t.code,{children:"sendTemperature"}),"\naction to the topic ",(0,s.jsx)(t.code,{children:"sensors/sensor_001/temperature"})," every 10 seconds, but only when active."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Control"}),": The sensor listens to the ",(0,s.jsx)(t.code,{children:"sensors/sensor_001/command"})," topic for ",(0,s.jsx)(t.code,{children:"ON"})," or ",(0,s.jsx)(t.code,{children:"OFF"})," commands to start or stop publishing."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Result"}),": This emulates a real temperature sensor that can be controlled remotely and publishes data on a schedule."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);